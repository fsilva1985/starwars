// Code generated by MockGen. DO NOT EDIT.
// Source: elasticsearch.go

// Package mock_elasticsearch is a generated GoMock package.
package elasticsearch

import (
        context "context"
        reflect "reflect"

        esapi "github.com/elastic/go-elasticsearch/esapi"
        elasticsearch "github.com/elastic/go-elasticsearch/v7"
        gomock "github.com/golang/mock/gomock"
)

// MockElasticsearch is a mock of Elasticsearch interface.
type MockElasticsearch struct {
        ctrl     *gomock.Controller
        recorder *MockElasticsearchMockRecorder
}

// MockElasticsearchMockRecorder is the mock recorder for MockElasticsearch.
type MockElasticsearchMockRecorder struct {
        mock *MockElasticsearch
}

// NewMockElasticsearch creates a new mock instance.
func NewMockElasticsearch(ctrl *gomock.Controller) *MockElasticsearch {
        mock := &MockElasticsearch{ctrl: ctrl}
        mock.recorder = &MockElasticsearchMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElasticsearch) EXPECT() *MockElasticsearchMockRecorder {
        return m.recorder
}

// Client mocks base method.
func (m *MockElasticsearch) Client() *elasticsearch.Client {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Client")
        ret0, _ := ret[0].(*elasticsearch.Client)
        return ret0
}

// Client indicates an expected call of Client.
func (mr *MockElasticsearchMockRecorder) Client() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockElasticsearch)(nil).Client))
}

// Create mocks base method.
func (m *MockElasticsearch) Create(ctx context.Context, request esapi.CreateRequest) (*esapi.Response, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Create", ctx, request)
        ret0, _ := ret[0].(*esapi.Response)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockElasticsearchMockRecorder) Create(ctx, request interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockElasticsearch)(nil).Create), ctx, request)
}

// Delete mocks base method.
func (m *MockElasticsearch) Delete(ctx context.Context, request esapi.DeleteRequest) (*esapi.Response, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Delete", ctx, request)
        ret0, _ := ret[0].(*esapi.Response)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockElasticsearchMockRecorder) Delete(ctx, request interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockElasticsearch)(nil).Delete), ctx, request)
}

// Index mocks base method.
func (m *MockElasticsearch) Index() string {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Index")
        ret0, _ := ret[0].(string)
        return ret0
}

// Index indicates an expected call of Index.
func (mr *MockElasticsearchMockRecorder) Index() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockElasticsearch)(nil).Index))
}

// Request mocks base method.
func (m *MockElasticsearch) Request(ctx context.Context, request esapi.GetRequest) (*esapi.Response, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Request", ctx, request)
        ret0, _ := ret[0].(*esapi.Response)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockElasticsearchMockRecorder) Request(ctx, request interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockElasticsearch)(nil).Request), ctx, request)
}

// Search mocks base method.
func (m *MockElasticsearch) Search(ctx context.Context, request esapi.SearchRequest) (*esapi.Response, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Search", ctx, request)
        ret0, _ := ret[0].(*esapi.Response)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockElasticsearchMockRecorder) Search(ctx, request interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockElasticsearch)(nil).Search), ctx, request)
}